# Basic GitHub Actions Pipeline for Kong Konnect
#
# Author: David MacDonald
# Contact: david.macdonald@konghq.com
# Website: https://konghq.com/
#
# DISCLAIMER: DO NOT USE THIS IN PRODUCTION - FOR DEMONSTRATION PURPOSES ONLY
#

name: APIOps

on:

  push:
    branches: 
      - '**'

  workflow_dispatch:

jobs:

  deploy-api:
  
    runs-on: ubuntu-22.04
    name: Deploy API to Kong Konnect Control Plane

    steps:
    
    - name: Checkout
      uses: actions/checkout@v4

    # Install Kongs decK tool: https://docs.konghq.com/deck/latest/

    - name: Install decK tool
      run: |
        curl -sL https://github.com/kong/deck/releases/download/v1.40.2/deck_1.40.2_linux_amd64.tar.gz -o deck.tar.gz
        tar -xf deck.tar.gz -C /tmp
        sudo cp /tmp/deck /usr/local/bin/

    # Install Inso CLI which we will use for Linting and Testing: https://docs.insomnia.rest/inso-cli/introduction

    - name: Install Inso CLI tool
      run: |
        curl -sL https://github.com/Kong/insomnia/releases/download/core%4010.3.1/inso-linux-x64-10.3.1.tar.xz -o inso.tar.xz
        tar -xf inso.tar.xz -C /tmp
        sudo cp /tmp/inso /usr/local/bin/

    # Use Insos Export Spec command to pull our OpenAPI Spec out of the .insomnia folder and store it as a normal OAS file

    - name: Export OpenAPI Spec
      working-directory: .
      run: |
        inso export spec $(yq '._id' $(echo -n .insomnia/ApiSpec/*)) --workingDir . --output ./api/oas.yaml

    # Read the configuration file and the OpenAPI Spec and populate the variables that we will be using

    - name: Set Variables from Config
      run: |
        echo "API_PRODUCT_NAME=$(yq .productName ./api/config/meta.yaml)" >> $GITHUB_ENV
        echo "API_PRODUCT_DESCRIPTION=$(yq .productDescription ./api/config/meta.yaml)" >> $GITHUB_ENV
        echo "API_PRODUCT_VERSION=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_ENV
        echo "API_PRODUCT_PUBLISH=$(yq .productPublish ./api/config/meta.yaml)" >> $GITHUB_ENV
        echo "API_PRODUCT_DEPRECATED=$(yq .productDeprecated ./api/config/meta.yaml)" >> $GITHUB_ENV
        echo "API_PRODUCT_VERSION_STATUS=$(yq .productVersionStatus ./api/config/meta.yaml)" >> $GITHUB_ENV
        echo "PORTAL_ID=$(yq .portalId ./api/config/meta.yaml)" >> $GITHUB_ENV
        echo "DELETED=$(yq .deleted ./api/config/meta.yaml)" >> $GITHUB_ENV
        echo "SHARED_FLOW_AUTH=$(yq .sharedFlowAuth ./api/config/meta.yaml)" >> $GITHUB_ENV
        echo "SHARED_FLOW_OBSERVABILITY=$(yq .sharedFlowObservability ./api/config/meta.yaml)" >> $GITHUB_ENV

    # The Konnect Control Plane Name and API Product Names might include characters that need to be URL encoded.

    - name: URL Encode Variables
      run: |
        echo "API_PRODUCT_NAME_ENCODED=$(echo ${{ env.API_PRODUCT_NAME }} | sed 's/ /%20/g')"  >> $GITHUB_ENV
        echo "KONNECT_CONTROL_PLANE_NAME_ENCODED=$(echo ${{ vars.KONNECT_CONTROL_PLANE_NAME }} | sed 's/ /%20/g')"  >> $GITHUB_ENV

    # Set Variables needed for plugins and service name used by decK

    - name: Set decK Env Variables
      run: |
        echo "DECK_GATEWAY_SERVICE_NAME=$(echo $API_PRODUCT_NAME_ENCODED-$API_PRODUCT_VERSION)"  >> $GITHUB_ENV

    # Use the Konnect Control Plane Name to search for the ID using the Konnect Control Plane API

    - name: Get Konnect Control Plane ID
      run: |
        echo "KONNECT_CONTROL_PLANE_ID=$(curl \
          --url "${{ vars.KONNECT_ADDRESS }}/v2/control-planes?filter%5Bname%5D=${{ env.KONNECT_CONTROL_PLANE_NAME_ENCODED }}" \
          --header "accept: */*"  \
          --header "Authorization: Bearer ${{ secrets.KONNECT_TOKEN }}" | jq -r '.data[0].id')" >> $GITHUB_ENV

    # Check that the OpenAPI Specification file that we exported from the Insomnia Workspace is valid and well formed

    - name: Lint OpenAPI Spec
      if: ${{ env.DELETED == 'false' }}
      run: |
        inso lint spec ./api/oas.yaml

    # Use decK Ping to check that we can connect to the Kong Konnect Control Plane

    - name: Ping Kong Konnect
      run: |
        deck gateway ping \
          --konnect-addr "${{ vars.KONNECT_ADDRESS }}" \
          --konnect-token ${{ secrets.KONNECT_TOKEN }} \
          --konnect-control-plane-name "${{ vars.KONNECT_CONTROL_PLANE_NAME }}"

    #######################################
    #
    #   BUILD CONFIGURATION STAGE
    #
    #######################################

    # Use decKs openapi2kong command to generate Kong Declarative Configuration from the OpenAPI Specification exported from the Insomnia Workspace.

    - name: Generate Kong declarative configuration from Spec
      if: ${{ env.DELETED == 'false' }}
      run: |
        deck file openapi2kong \
          --spec ./api/oas.yaml \
          --format yaml \
          --select-tag ${{ env.DECK_GATEWAY_SERVICE_NAME }} \
          --output-file ./kong-generated.yaml \
          --no-id

    # Use decK Merge to merge together our generated Kong Declarative Configuration File with the contents of the Plugin folder in our repository

    - name: Merge Kong Configuration with Plugins
      if: ${{ env.DELETED == 'false' }}
      run: |
        deck file merge kong-generated.yaml ./api/plugins/* -o kong.yaml

    # Use decK Merge to merge together our generated Kong Declarative Configuration File with the contents of the shared flow plugins

    - name: Merge Kong Configuration with Shared Flow Plugins for Auth
      if: ${{ env.SHARED_FLOW_AUTH == 'true' && env.DELETED == 'false' }}
      run: |
        git clone https://github.com/macdonald-kong/shared-auth.git
        deck file merge kong.yaml ./shared-auth/* -o kong.yaml

    - name: Merge Kong Configuration with Shared Flow Plugins for Observability
      if: ${{ env.SHARED_FLOW_OBSERVABILITY == 'true' && env.DELETED == 'false' }}
      run: |
        git clone https://github.com/macdonald-kong/shared-observability.git
        deck file merge kong.yaml ./shared-observability/* -o kong.yaml

    # Update Gateway Service Name so that it matches our plugins

    - name: Update Gateway Service Name
      if: ${{ env.DELETED == 'false' }}
      run: |
        yq eval '.services[0].name = "${{ env.DECK_GATEWAY_SERVICE_NAME }}"' -i kong.yaml

    # Use decK Validate to check that the new generated Kong Declarative Configuration is valid

    - name: Tag Kong declarative configuration with service name
      if: ${{ env.DELETED == 'false' }}
      run: |
        cat kong.yaml | deck file add-tags ${{ env.DECK_GATEWAY_SERVICE_NAME }} --output-file kong.yaml

    - name: Validate Kong declarative configuration
      if: ${{ env.DELETED == 'false' }}
      run: |
        deck file validate kong.yaml 

    # Publishes Kong Declarative Configuration as an artifact

    - name: 'Upload Kong Config Artifact'
      if: ${{ env.DELETED == 'false' }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.DECK_GATEWAY_SERVICE_NAME }}-api-kong-config
        path: kong.yaml

    #######################################
    #
    #   DEPLOY CONFIGURATION STAGE
    #
    #######################################

    # Compare the new desired state represented in the generated Kong Declarative Configuration with the current state of the platform

    - name: Diff declarative config
      if: ${{ env.DELETED == 'false' }}
      run: |
        deck gateway diff kong.yaml \
          --konnect-addr ${{ vars.KONNECT_ADDRESS }} \
          --konnect-token ${{ secrets.KONNECT_TOKEN }} \
          --konnect-control-plane-name ${{ vars.KONNECT_CONTROL_PLANE_NAME }} \
          --select-tag ${{ env.DECK_GATEWAY_SERVICE_NAME }}

    # Use decK dump to take a backup of the entire Control Plane Configuration
      
    - name: Backup Existing Kong Configuration
      run: |
        deck gateway dump \
          --konnect-addr ${{ vars.KONNECT_ADDRESS }} \
          --konnect-token ${{ secrets.KONNECT_TOKEN }} \
          --konnect-control-plane-name ${{ vars.KONNECT_CONTROL_PLANE_NAME }} \
          --output-file kong-backup.yaml

    # Publishes the Backup Kong Declarative Configuration as an artifact

    - name: 'Upload Kong Config Backup Artifact'
      uses: actions/upload-artifact@v4
      with:
        name: kong-backup
        path: kong-backup.yaml

    # Uses the deck sync command to push our generated Kong Declarative Configuration to the Kong Konnect Control Plane

    - name: Deploy declarative config to development environment
      if: ${{ env.DELETED == 'false' }}
      id: deploy-declarative-config
      run: |
        deck gateway sync kong.yaml \
          --konnect-addr ${{ vars.KONNECT_ADDRESS }} \
          --konnect-token ${{ secrets.KONNECT_TOKEN }} \
          --konnect-control-plane-name ${{ vars.KONNECT_CONTROL_PLANE_NAME }} \
          --select-tag ${{ env.DECK_GATEWAY_SERVICE_NAME }}

    # Set a Variable containing the Service ID of the Service that we deployed - we need this to link the API Product to a Kong Service

    - name: Get Service ID
      if: ${{ env.DELETED == 'false' }}
      id: get-service-id
      run: |
        echo "SERVICE_ID=$(curl \
          --url "${{ vars.KONNECT_ADDRESS }}/v2/control-planes/${{ env.KONNECT_CONTROL_PLANE_ID}}/core-entities/services?tags=${{ env.DECK_GATEWAY_SERVICE_NAME }}" \
          --header 'accept: application/json' \
          --header "Authorization: Bearer ${{ secrets.KONNECT_TOKEN }}" | jq -r '.data[0].id')" >> "$GITHUB_ENV"

    #######################################
    #
    #   CREATE API STAGE
    #
    #######################################

    # Add the OAS to the JSON Payload required by the Konnect Product API Version API and output as a file

    - name: Prepare OpenAPI Specification 
      if: ${{ env.DELETED == 'false' }}
      id: prepare-oas
      run: |
        yq -i '.servers[0].url = "${{ vars.GATEWAY_URL }}"' ./api/oas.yaml
        base64 -w 0 ./api/oas.yaml > oas-encoded.yaml
        jq --null-input --arg content "$(<oas-encoded.yaml)" '{"name": "oas.yaml", "content": $content}' >> product_version_spec.json

    # Checks if an API Version already exists so that we don't create a duplicate each time this is run

    - name: Get API ID if it already exists
      if: ${{ env.DELETED == 'false' }}
      id: get-api-product-id
      run: |
          echo "API_PRODUCT_ID=$(curl \
          --request GET \
          --url "${{ vars.KONNECT_ADDRESS }}/v3/apis?filter%5Bname%5D=${{ env.API_PRODUCT_NAME_ENCODED }}" \
          --header "Authorization: Bearer ${{ secrets.KONNECT_TOKEN }}" \
          --header "Accept: application/json" | jq -r '.data[0].id')" >> "$GITHUB_ENV"

    # Create a new API if the API ID from the previous script is null

    - name: Create API
      if: ${{ env.DELETED == 'false' }}
      id: create-api
      run: |
        echo API_PRODUCT_ID: ${{ env.API_PRODUCT_ID }}
        if [[ "${{ env.API_PRODUCT_ID }}" == "null" ]]; then
          echo "API_PRODUCT_ID=$(curl \
            --url ${{ vars.KONNECT_ADDRESS }}/v3/apis \
            --header "Authorization: Bearer ${{ secrets.KONNECT_TOKEN }}" \
            --header 'Content-Type: application/json' \
            --data '{
              "name":"${{ env.API_PRODUCT_NAME }}",
              "description":"${{ env.API_PRODUCT_DESCRIPTION }}",
              "spec_content": ""
            }' | jq -r .id)" >> "$GITHUB_ENV"
        fi

    # Base64 encode each markdown file in the portal_assets folder and inject each into the required json payload to send to the Konnect API Products API

    - name: Prepare Static Documentation
      if: ${{ env.DELETED == 'false' }}
      id: prepare-static-docs
      run: |        
        mkdir docs
        for entry in "./api/portal_assets"/*
        do
          echo "{\"slug\":\"$(echo "$entry" | sed 's#.*/\([^/]*\)\.md#\1#')\",\"status\":\"published\",\"title\":\"$(echo "$entry" | sed 's#.*/\([^/]*\)\.md#\1#')\",\"content\":\"$(base64 -i ./api/portal_assets/${entry##*/})\"}" >> ./docs/$(echo "$entry" | sed 's#.*/\([^/]*\)\.md#\1#').json
        done

    # For each of the Json payloads that we have generated in the previous step, send them to the API Products Documents API to upload

    - name: Upload Static Documentation
      if: ${{ env.DELETED == 'false' }}
      id: upload-static-docs
      run: |
        for entry in "./docs"/*
        do
          curl -X POST ${{ vars.KONNECT_ADDRESS }}/v3/apis/${{ env.API_PRODUCT_ID }}/documents \
          --header "Authorization: Bearer ${{ secrets.KONNECT_TOKEN }}" \
          --header "Content-Type: application/json" \
          -d @$entry
        done

    #######################################
    #
    #   TESTING STAGE
    #
    #######################################

    # Run the tests defined in our Insomnia Test Suite

    - name: Run Tests
      if: ${{ env.DELETED == 'false' }}
      id: run-tests
      run: |
        inso run test $(yq '._id' $(echo -n .insomnia/ApiSpec/*)) --workingDir .

    #######################################
    #
    #   DEPLOY TO PORTAL STAGE
    #
    #######################################

    - name: Publish to Developer Portal
      if: ${{ env.DELETED == 'false' }}
      run: |
        if [[ "${{ env.API_PRODUCT_PUBLISH }}" == true ]]; then
            curl --request PATCH \
              --url "${{ vars.KONNECT_ADDRESS }}/v2/api-products/${{ env.API_PRODUCT_ID }}" \
              --header "Authorization: Bearer ${{ secrets.KONNECT_TOKEN }}" \
              --header 'Content-Type: application/json' \
              --header 'accept: application/json' \
              --data '{"portal_ids":["${{ env.PORTAL_ID }}"]}'
        else
            curl --request PATCH \
              --url "${{ vars.KONNECT_ADDRESS }}/v2/api-products/${{ env.API_PRODUCT_ID }}" \
              --header "Authorization: Bearer ${{ secrets.KONNECT_TOKEN }}" \
              --header 'Content-Type: application/json' \
              --header 'accept: application/json' \
              --data '{"portal_ids":[]}'
        fi

    #######################################
    #
    #   DELETION FLOW
    #
    #######################################

    - name: Delete Service Routes and Plugins
      if: ${{ env.DELETED == 'true' }}
      id: deck-reset
      run: |
        deck gateway reset \
          --konnect-addr "${{ vars.KONNECT_ADDRESS }}" \
          --konnect-token ${{ secrets.KONNECT_TOKEN }} \
          --konnect-control-plane-name "${{ vars.KONNECT_CONTROL_PLANE_NAME }}" \
          --select-tag ${{ env.DECK_GATEWAY_SERVICE_NAME }} \
          --force
